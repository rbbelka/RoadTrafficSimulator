// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var World, _, experiment1, experiment2, experiment3, fs, getParams, measureAverageSpeed, settings;

  require('./helpers');

  World = require('./model/world');

  _ = require('underscore');

  settings = require('./settings');

  fs = require('fs');

  measureAverageSpeed = function(setupCallback) {
    var i, j, map, results, world;
    world = new World();
    map = fs.readFileSync('./experiments/map.json', {
      encoding: 'utf8'
    });
    console.log(map);
    world.load(map);
    world.carsNumber = 50;
    if (typeof setupCallback === "function") {
      setupCallback(world);
    }
    results = [];
    for (i = j = 0; j <= 10000; i = ++j) {
      world.onTick(0.2);
      results.push(world.instantSpeed);
    }
    return (results.reduce(function(a, b) {
      return a + b;
    })) / results.length;
  };

  getParams = function(world) {
    var i, id, params;
    params = (function() {
      var ref, results1;
      ref = world.intersections.all();
      results1 = [];
      for (id in ref) {
        i = ref[id];
        results1.push(i.controlSignals.flipMultiplier);
      }
      return results1;
    })();
    return params;
  };

  settings.lightsFlipInterval = 160;

  experiment1 = function() {
    var j, len, multiplier, out, ref, results1;
    out = fs.createWriteStream('./experiments/1.data');
    out.write('multiplier avgSpeed\n');
    ref = [0.0001, 0.01, 0.02, 0.05, 0.1, 0.25, 0.5, 0.75, 1, 2, 3, 4, 5];
    results1 = [];
    for (j = 0, len = ref.length; j < len; j++) {
      multiplier = ref[j];
      results1.push((function(multiplier) {
        var result;
        result = measureAverageSpeed(function(world) {
          var i, id, ref1;
          ref1 = world.intersections.all();
          for (id in ref1) {
            i = ref1[id];
            i.controlSignals.flipMultiplier = multiplier;
          }
          return getParams(world);
        });
        return out.write(multiplier + ' ' + result + '\n');
      })(multiplier));
    }
    return results1;
  };

  experiment2 = function() {
    var it, j, out, result, results1;
    out = fs.createWriteStream('./experiments/2.data');
    out.write('it avgSpeed\n');
    results1 = [];
    for (it = j = 0; j <= 9; it = ++j) {
      result = measureAverageSpeed(function(world) {
        var i, id, ref;
        ref = world.intersections.all();
        for (id in ref) {
          i = ref[id];
          i.controlSignals.flipMultiplier = Math.random();
        }
        return getParams(world);
      });
      results1.push(out.write(it + ' ' + result + '\n'));
    }
    return results1;
  };

  experiment3 = function() {
    var it, j, out, result, results1;
    out = fs.createWriteStream('./experiments/3.data');
    out.write('it avgSpeed\n');
    results1 = [];
    for (it = j = 0; j <= 10; it = ++j) {
      result = measureAverageSpeed(function(world) {
        var i, id, ref;
        ref = world.intersections.all();
        for (id in ref) {
          i = ref[id];
          i.controlSignals.flipMultiplier = 1;
        }
        i.controlSignals.phaseOffset = 0;
        return getParams(world);
      });
      results1.push(out.write(it + ' ' + result + '\n'));
    }
    return results1;
  };

  experiment1();

}).call(this);

//# sourceMappingURL=runner.js.map
